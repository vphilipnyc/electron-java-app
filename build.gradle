buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id 'java'
    id 'application'
    id 'com.vaadin' version '0.6.0'
}

def jettyVersion = "9.4.27.v20200227"

allprojects {
    group = 'org.strangeway'
    version = '0.2'

    repositories {
        mavenCentral()
    }
}

sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'src'
        }
    }
    test {
        java {
            srcDir 'test'
        }
        resources {
            srcDir 'test'
        }
    }
}

node {
    nodeModulesDir = project.file('electron-src')
}

dependencies {
    implementation enforcedPlatform('com.vaadin:vaadin-bom:14.1.17')

    // Vaadin 14
    implementation("com.vaadin:vaadin-core") {
        // Webjars are only needed when running in Vaadin 13 compatibility mode
        ["com.vaadin.webjar", "org.webjars.bowergithub.insites",
         "org.webjars.bowergithub.polymer", "org.webjars.bowergithub.polymerelements",
         "org.webjars.bowergithub.vaadin", "org.webjars.bowergithub.webcomponents"]
                .forEach { group -> exclude(group: group) }
    }
    implementation "javax.servlet:javax.servlet-api:3.1.0"

    implementation 'ch.qos.logback:logback-classic:1.2.3'

    implementation "org.eclipse.jetty:jetty-annotations:${jettyVersion}"
    implementation "org.eclipse.jetty:jetty-continuation:${jettyVersion}"
    implementation "org.eclipse.jetty:jetty-server:${jettyVersion}"
    implementation "org.eclipse.jetty:jetty-webapp:${jettyVersion}"
    implementation "org.eclipse.jetty.websocket:javax-websocket-server-impl:${jettyVersion}"
}

applicationName = 'electron-vaadin'
mainClassName = 'org.strangeway.electronvaadin.Launcher'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

configurations.archives.artifacts.removeAll {
    it.file =~ 'tar'
}

/**
 * Installs Node and any dependencies.
 *
 * Runs automatically on build only when the electron-src/node_modules/.bin/electron file is not present,
 * as it is required even in development mode.
 */
task setupNode(group: 'build', dependsOn: [vaadinPrepareNode, npm_install]) {
}

task buildApp(group: 'build', dependsOn: installDist) {
    doLast {
        def targetDir = project.file('electron-src/electron-vaadin')

        project.file('electron-src/electron-vaadin/').deleteDir()
        copy {
            from project.file('build/install/electron-vaadin/')
            into targetDir
        }

        def osName = System.getProperty('os.name').toLowerCase()
        def isWindows = osName.contains('windows')

        def appFile = new File(targetDir, 'bin/electron-vaadin')
        if (!isWindows) {
            exec {
                commandLine 'chmod', '+x', appFile.absolutePath
            }
        }
    }
}
if (!new File('electron-src/node_modules/.bin/electron').exists()) {
    buildApp.dependsOn setupNode
}
build.dependsOn buildApp

task runApp(group: 'debug', dependsOn: [buildApp, vaadinPrepareFrontend]) {
    doLast {
        def osName = System.getProperty('os.name').toLowerCase()
        def isWindows = osName.contains('windows')

        def nodeDir = isWindows ? new File('node') : new File('node', 'bin')
        def javaHome = System.getenv('JAVA_HOME')

        exec {
            workingDir 'electron-src'
            environment 'PATH', System.getenv('PATH') + File.pathSeparator + nodeDir.absolutePath
            if (javaHome != null && !javaHome.isBlank()) {
                environment 'JAVA_HOME', System.getenv('JAVA_HOME')
            }
            if (isWindows) {
                commandLine 'cmd', '/c', '"./node_modules/.bin/electron" .'
            } else {
                commandLine './node_modules/.bin/electron', '.'
            }
        }
    }
}

task bundleApp(group: 'build', dependsOn: buildApp) {
    outputs.dir(project.file('build/bundle'))

    doLast {
        def osName = System.getProperty('os.name').toLowerCase()

        def isWindows = osName.contains('windows')
        def isMacOS = osName.contains('darwin')

        def nodeDir = isWindows ? new File('node') : new File('node', 'bin')

        def targetDir = project.file('build/bundle')
        if (targetDir.exists()) {
            targetDir.deleteDir()
        }
        targetDir.mkdirs()

        exec {
            workingDir 'electron-src'
            environment 'PATH', System.getenv('PATH') + File.pathSeparator + nodeDir.absolutePath
            if (isWindows) {
                commandLine 'cmd', '/c', '"./node_modules/.bin/electron-packager" . ' +
                        '--out=../build/bundle/ ' +
                        '--icon=icon.ico ' +
                        '--ignore=README.md ' +
                        '--ignore=.npmignore ' +
                        '--ignore=.travis.yml" .'
            } else if (isMacOS) {
                commandLine './node_modules/.bin/electron-packager', '.',
                        '--icon=icon.icns',
                        '--out=../build/bundle/',
                        '--ignore=README.md',
                        '--ignore=.npmignore',
                        '--ignore=.travis.yml'
            } else {
                commandLine './node_modules/.bin/electron-packager', '.',
                        '--icon=icon.ico',
                        '--out=../build/bundle/',
                        '--ignore=README.md',
                        '--ignore=.npmignore',
                        '--ignore=.travis.yml'
            }
        }
    }
}

